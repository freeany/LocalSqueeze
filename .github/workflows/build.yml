name: Build and Publish

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'draft'
        type: choice
        options:
          - draft
          - prerelease
          - release
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

env:
  NODE_VERSION: '22'
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  build:
    runs-on: ${{ matrix.platform }}
    
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: win32
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python (for native modules)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Cache Electron Builder
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ runner.os }}-electron-builder-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-cache-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Apple Certificate
        if: matrix.platform == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
        
      - name: Package application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: npm run package
        
      - name: Build (macOS Intel)
        if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 不进行macOS应用签名和公证
          npm_config_target_arch: x64
        run: npm run make
        
      - name: Build (macOS Apple Silicon)
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 不进行macOS应用签名和公证
          npm_config_target_arch: arm64
        run: npm run make

      - name: Publish to GitHub (Dry Run)
        if: github.event.inputs.dry_run == 'true' || github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        run: npm run publish -- --dry-run

      - name: Sign Windows Installer
        if: matrix.platform == 'windows-latest'
        uses: azure/trusted-signing-action@v0.5.0
        with:
          files-folder: out/make
          files-folder-filter: exe,dll,sys,efi,scr,node,msi,appx,appxbundle,msix,msixbundle,cat,cab,xap,vbs,wsf,ps1
          files-folder-recurse: true
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}${{ matrix.arch && format('-{0}', matrix.arch) || '' }}
          path: out/make/
          retention-days: 7
          compression-level: 6
          
  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && github.event.inputs.dry_run != 'true'
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          name: build-win32
          path: ./artifacts/win32/
          
      - name: Download macOS Intel Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-darwin-x64
          path: ./artifacts/darwin-x64/
          
      - name: Download macOS Apple Silicon Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-darwin-arm64
          path: ./artifacts/darwin-arm64/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        run: npm run publish