name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

  build:
    needs: create-release
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: ${{ runner.os == 'Windows' && 'npm' || 'npm' }}
          cache-dependency-path: package-lock.json

      - name: Setup Windows environment
        if: runner.os == 'Windows'
        run: |
          # 设置npm配置以避免权限问题
          npm config set cache C:\npm-cache --global
          npm config set tmp C:\npm-tmp --global
          # 创建临时目录
          New-Item -ItemType Directory -Force -Path C:\npm-cache
          New-Item -ItemType Directory -Force -Path C:\npm-tmp
        shell: pwsh
      
      - name: Install dependencies
        run: |
          if ($env:RUNNER_OS -eq "Windows") {
            # Windows特定的npm安装，处理权限问题
            npm ci --no-optional --legacy-peer-deps --prefer-offline
          } else {
            npm ci
          }
        shell: pwsh
      
      - name: Build and publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS签名环境变量（如果需要）
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if ($env:RUNNER_OS -eq "Windows") {
            # Windows特定的发布命令，增加超时和重试
            npm run publish --verbose
          } else {
            npm run publish
          }
        shell: pwsh
        timeout-minutes: 30